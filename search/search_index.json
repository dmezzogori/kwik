{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kwik","text":"<p>Documentation: https://kwik.rocks</p> <p>Repository: https://github.com/dmezzogori/kwik</p> <p>Kwik is a web framework for building modern, batteries-included, RESTful backends with Python 3.10+.   Kwik is based on FastAPI, builds upon it and delivers an opinionated concise, business-oriented API.</p> <p>The key features are:</p> <ul> <li>Conciseness: Kwik is quick (pun-intended )</li> <li>Battle-tested: developed internally at Kheperer, we use it every day to build robust and modern solutions for our customers.</li> <li>Standards-based</li> </ul> <p>Warning</p> <p>While Kwik is in active development, and already used for production, it is still in a pre-release state.</p> <p>The API is subject to change, and the documentation is not complete yet.</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<p>Python 3.10+</p> <p>Kwik stands on the shoulder of a couple of giants:</p> <ul> <li>FastAPI: for the web parts.</li> <li>SQLAlchemy: for the ORM part.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install kwik\n---&gt; 100%\nInstalled\n</code></pre> <p>It will install kwik and all its dependencies.</p>"},{"location":"#example","title":"Example","text":""},{"location":"#run-it","title":"Run it","text":"<pre><code>$ python -m kwik\nUvicorn running on http://localhost:8080 (Press CTRL+C to quit)\n</code></pre> <p>If kwik is started in this way, it automatically creates a development server on port <code>8080</code>, with hot-reloading enabled</p>"},{"location":"#check-it","title":"Check it","text":"<p>Open your browser at http://localhost:8080/docs.</p> <p>You will see the automatic interactive API documentation, showing the built-in endpoints and schemas.</p> <p></p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"features/","title":"Features","text":"<p>Kwik features</p> <p>Kwik gives you the following features:</p> <ul> <li>FastAPI-based: all amazing FastAPI features are available, such as:<ul> <li>Automatic interactive API documentation.</li> <li>Modern Python standards-based type hints.</li> </ul> </li> <li>Automatic settings management from environment variables.<ul> <li>Pydantic-based validation of settings.</li> <li>Database connections management via settings variables.</li> </ul> </li> <li> <p>Dependency injection</p> <ul> <li>Automatic injection of database connections, with related transaction management.</li> <li>Automatic injection of user credentials in request-response cycle.</li> </ul> </li> <li> <p>ORM support for Soft Delete pattern and automatic Audit.</p> </li> <li>Authentication support with JWT (OAuth2.0 based).</li> <li>Permission and Roles management built-in.</li> </ul>"},{"location":"tutorial/","title":"Introduction","text":"<p>Kwik is meant to be a batteries-included web framework for building modern, RESTful backends with Python 3.10+.</p> <p>As such, it handles automatically many of the tedious aspects of building a web application, such as:</p> <ul> <li>Database connection and transaction management</li> <li>User authentication and authorization</li> <li>Settings management</li> <li>Modern and consolidated best-practices, such as auditing, soft-delete, etc.</li> </ul> <p>The objective of Kwik is to provide a concise API, which is easy to learn and use, and which is also easy to extend. Kwik is operationally extensible with any existing FastAPI application.</p> <p>The objective of Kwik is to uplift the developer experience, by providing a framework which is easy to use,  and which is also easy to extend.</p> <p>In the simplest of the cases, the developer just need to define the SQL models that represent the data, and the Kwik framework will automatically provide the RESTful APIs for CRUD operations.</p> <p>Kwik also aims at enabling the developer to follow efficiently the best practices of the industry, such as Test-Driven Development. Kwik is designed to be easily testable, and it provides a set of fixtures that can be used to test the application.</p> <p>Kwik is 100% tested.</p>"},{"location":"tutorial/auditing/","title":"Auditing","text":""},{"location":"tutorial/configuration/","title":"Configuration","text":"<p>The configuration of a Kwik application is done through the use of environment variables.</p> <p>The handling of the configuration is done by the Pydantic library,  which is used by Kwik to validate the settings.</p> <p>Warning</p> <p>The configuration is done through environment variables, which are not secure.  You should not use them to store sensitive information, like passwords, tokens, etc.</p> <p>Instead, you should use the SecretStr type,  which will read the values from environment variables, but will not show them in the documentation.</p> <p>The following are the main configuration variables available, and corresponding default values:</p> <ul> <li>General:<ul> <li><code>SERVER_NAME</code>: <code>backend</code> - The name of the server/service on which the application is running (i.e. docker service name).</li> <li><code>HOST</code>: <code>localhost</code> - The hostname on which the application is running.</li> <li><code>PORT</code>: <code>8080</code> - The port on which the application is running.</li> <li><code>API_V1_STR</code>: <code>/api/v1</code> - The base path for the API.</li> <li><code>PROJECT_NAME</code>: <code>kwik</code> - The name of the project being developed.</li> </ul> </li> <li>Database:<ul> <li><code>POSTGRES_SERVER</code>: <code>db</code> - The hostname of the database server.</li> <li><code>POSTGRES_DB</code>: <code>db</code> - The name of the database.</li> <li><code>POSTGRES_USER</code>: <code>postgres</code> - The username to use to connect to the database.</li> <li><code>POSTGRES_PASSWORD</code>: <code>root</code> - The password to use to connect to the database.</li> <li><code>ENABLE_SOFT_DELETE</code>: <code>False</code> - A flag to enable/disable soft delete.</li> </ul> </li> <li>Mailserver:<ul> <li><code>SMTP_HOST</code></li> <li><code>SMTP_PORT</code></li> <li><code>SMTP_USER</code></li> <li><code>SMTP_PASSWORD</code></li> <li><code>SMTP_TLS</code></li> </ul> </li> <li>Superuser credentials:<ul> <li><code>FIRST_SUPERUSER</code>: <code>admin@example.com</code> - The email address of the admin superuser.</li> <li><code>FIRST_SUPERUSER_PASSWORD</code>: <code>admin</code> - The password of the admin superuser.</li> </ul> </li> <li>Misc:<ul> <li><code>DEBUG</code>: <code>True</code> - A flag to enable/disable debug mode.</li> <li><code>HOTRELOAD</code>: <code>True</code> - A flag to enable/disable hot reloading.</li> <li><code>WEBSOCKET_ENABLED</code>: <code>False</code> - A flag to enable/disable websocket support.</li> </ul> </li> </ul> <p>Note</p> <p>The default values are used only for development purposes.  In production, you should always override them with the appropriate values.</p> <p>Moreover, you should be aware that environment variables names are case sensitive.</p>"},{"location":"tutorial/database/","title":"Database","text":""},{"location":"tutorial/endpoints/","title":"Endpoints","text":""},{"location":"tutorial/first-steps/","title":"First steps","text":"<p>To run your first Kwik application, once you have installed it all you need to do is to create a file named <code>app.py</code> with the following content:</p> <pre><code>from kwik import Kwik, run\nfrom kwik.api.api import api_router\n\napp = Kwik(api_router)\n\nrun(app)\n</code></pre> <p>Then run it with:</p> <pre><code>$ python app.py\n\nKwikApp ready\nKwikApp running on http://localhost:8080\nSwagger available at http://localhost:8080/docs\n</code></pre> <p>The <code>run()</code> function will start a development server on port <code>8080</code>, with hot-reloading enabled.</p> <p>Just point your browser to http://localhost:8080/docs, and you will see the automatic interactive API documentation.</p> <p></p>"},{"location":"tutorial/first-steps/#what-just-happened","title":"What just happened?","text":"<p>The <code>Kwik</code> class is the main entry point for your application.</p> <p>It takes a list of routers, which are the components that define the endpoints of your application.</p> <p>In this case, we are using the <code>api_router</code> from <code>kwik.api.api</code>, which is the default router for the built-in endpoints. The default endpoints, as they can be seen in the above picture, are:</p> <ul> <li><code>/api/v1/login</code>: to handle user authentication and token generation.</li> <li><code>/api/v1/users</code>: to handle user management.</li> <li><code>/api/v1/roles</code>: to handle role management.</li> <li><code>/api/v1/permissions</code>: to handle permission management.</li> </ul>"},{"location":"tutorial/first-steps/#next-steps","title":"Next steps","text":"<p>Now that you have your first Kwik application running, you are probabily interested in the following:</p> <ul> <li>how is the configuration handled? Go to the configuration tutorial.</li> <li>you can go to the endpoints tutorial to learn how to add your own endpoints.</li> <li>you can go to the database tutorial to learn how to use the database.</li> </ul>"},{"location":"tutorial/guards/","title":"Guards","text":""},{"location":"tutorial/models/","title":"Models","text":""},{"location":"tutorial/permissions/","title":"Permissions","text":""},{"location":"tutorial/schemas/","title":"Schemas","text":""},{"location":"tutorial/utilities/","title":"Utilities","text":""}]}